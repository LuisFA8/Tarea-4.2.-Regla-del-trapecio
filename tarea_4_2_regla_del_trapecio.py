# -*- coding: utf-8 -*-
"""Tarea 4.2. Regla del trapecio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qVTDy155g-5S6PeAgSbxghAtz3u-6Eu9

Ejercicio 1
"""

import numpy as np
import matplotlib.pyplot as plt

# Definimos la función a integrar
def f(x):
    return x**2 + 3*x + 1

# Implementación de la regla del trapecio compuesta
def trapezoidal_rule(a, b, n):
    # Puntos equidistantes entre a y b
    x = np.linspace(a, b, n+1)
    y = f(x)  # Evaluación de la función en esos puntos
    h = (b - a) / n  # Tamaño del paso
    # Cálculo de la integral usando la fórmula del trapecio
    integral = (h / 2) * (y[0] + 2 * sum(y[1:n]) + y[n])
    return integral, x, y

# Parámetros de integración
a, b = 0, 2  # Intervalo de integración

# Bucle para calcular y graficar con diferentes valores de n
for n in [10, 20, 30]:
    # Cálculo de la integral aproximada
    integral_approx, x_vals, y_vals = trapezoidal_rule(a, b, n)

    # Imprimir el resultado de la integral aproximada
    print(f"Integral aproximada con la regla del trapecio (n={n}): {integral_approx:.6f}")

    # Crear puntos más finos para una visualización más precisa de la función
    x_fine = np.linspace(a, b, 100)
    y_fine = f(x_fine)

    # Gráfica de la función y la aproximación por trapecios
    plt.figure(figsize=(8, 5))
    plt.plot(x_fine, y_fine, 'g-', label=r'$f(x) = x^2 + 3x + 1$', linewidth=2)  # Curva en verde
    plt.fill_between(x_vals, y_vals, alpha=0.4, color='orange', label=f"Aproximación Trapecios (n={n})")  # Área en naranja
    plt.plot(x_vals, y_vals, 'ko-', label="Puntos de integración")  # Puntos de integración en negro

    # Etiquetas y leyenda
    plt.xlabel("$x$")
    plt.ylabel("$f(x)$")
    plt.title(f"Aproximación de la integral con la regla del trapecio (n={n})")
    plt.legend()
    plt.grid(True)

    # Guardar la figura en formato PNG
    plt.savefig(f"trapecio_n{n}.png")
    plt.show()

"""Ejercicio 2"""

import numpy as np
import matplotlib.pyplot as plt

# Definimos la función a integrar
def f(x):
    return np.exp(-x**2)

# Implementación de la regla del trapecio compuesta
def trapezoidal_rule(a, b, n):
    # Puntos equidistantes entre a y b
    x = np.linspace(a, b, n+1)
    y = f(x)  # Evaluación de la función en esos puntos
    h = (b - a) / n  # Tamaño del paso
    # Cálculo de la integral usando la fórmula del trapecio
    integral = (h / 2) * (y[0] + 2 * sum(y[1:n]) + y[n])
    return integral, x, y

# Parámetros de integración
a, b = 1, 4  # Intervalo de integración

# Bucle para calcular y graficar con diferentes valores de n
for n in [5, 10, 15]:
    # Cálculo de la integral aproximada
    integral_approx, x_vals, y_vals = trapezoidal_rule(a, b, n)

    # Imprimir el resultado de la integral aproximada
    print(f"Integral aproximada con la regla del trapecio (n={n}): {integral_approx:.6f}")

    # Crear puntos más finos para una visualización más precisa de la función
    x_fine = np.linspace(a, b, 100)
    y_fine = f(x_fine)

    # Gráfica de la función y la aproximación por trapecios
    plt.figure(figsize=(8, 5))
    plt.plot(x_fine, y_fine, 'm-', label=r'$f(x) = e^{-x^2}$', linewidth=2)  # Curva en magenta
    plt.fill_between(x_vals, y_vals, alpha=0.4, color='yellow', label=f"Aproximación Trapecios (n={n})")  # Área en amarillo
    plt.plot(x_vals, y_vals, 'ko-', label="Puntos de integración")  # Puntos de integración en negro

    # Etiquetas y leyenda
    plt.xlabel("$x$")
    plt.ylabel("$f(x)$")
    plt.title(f"Aproximación de la integral con la regla del trapecio (n={n})")
    plt.legend()
    plt.grid(True)

    # Guardar la figura en formato PNG
    plt.savefig(f"trapecio_n{n}.png")
    plt.show()

"""Ejercicio 3"""

import numpy as np
import matplotlib.pyplot as plt

# Definimos la función a integrar
def f(x):
    return np.sin(x)

# Implementación de la regla del trapecio compuesta
def trapezoidal_rule(a, b, n):
    # Generación de puntos equidistantes entre a y b
    x = np.linspace(a, b, n+1)
    y = f(x)  # Evaluación de la función en esos puntos
    h = (b - a) / n  # Cálculo del tamaño del paso
    # Cálculo de la integral usando la fórmula del trapecio
    integral = (h / 2) * (y[0] + 2 * sum(y[1:n]) + y[n])
    return integral, x, y

# Parámetros de integración
a, b = 0, np.pi  # Intervalo de integración

# Bucle para calcular y graficar con diferentes valores de n
for n in [12, 24, 36]:
    # Cálculo de la integral aproximada usando la regla del trapecio
    integral_approx, x_vals, y_vals = trapezoidal_rule(a, b, n)

    # Imprimir el resultado de la integral aproximada
    print(f"Integral aproximada con la regla del trapecio (n={n}): {integral_approx:.6f}")

    # Crear puntos más finos para una visualización más precisa de la función
    x_fine = np.linspace(a, b, 100)
    y_fine = f(x_fine)

    # Crear la figura para graficar
    plt.figure(figsize=(8, 5))
    plt.plot(x_fine, y_fine, 'g-', label=r'$f(x) = \sin(x)$', linewidth=2)  # Color verde para la función
    plt.fill_between(x_vals, y_vals, alpha=0.4, color='orange', label=f"Aproximación Trapecios (n={n})")  # Relleno en naranja
    plt.plot(x_vals, y_vals, 'bo-', label="Puntos de integración")  # Puntos de integración en azul

    # Configuración de la gráfica
    plt.xlabel("$x$")
    plt.ylabel("$f(x)$")
    plt.title(f"Aproximación de la integral con la regla del trapecio (n={n})")
    plt.legend()
    plt.grid(True)

    # Guardar la figura en formato PNG
    plt.savefig(f"trapecio_n{n}.png")
    plt.show()